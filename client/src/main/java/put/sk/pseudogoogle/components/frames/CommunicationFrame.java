package put.sk.pseudogoogle.components.frames;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import put.sk.pseudogoogle.error.ConnectionException;
import put.sk.pseudogoogle.logic.communication.Communicator;
import put.sk.pseudogoogle.logic.connection.Connector;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.net.Socket;

public class CommunicationFrame extends JFrame {
  private final Connector connector;
  private final Communicator communicator;
  private final Runnable onResponseListener;
  private final Runnable onDisconnectListener;
  private JPanel contentPane;
  private JButton buttonSearch;
  private JButton buttonDisconnect;
  private JTextField textFieldWord;

  public CommunicationFrame(
      Connector connector,
      Communicator communicator,
      Runnable onResponseListener,
      Runnable onDisconnectListener) {
    this.connector = connector;
    this.communicator = communicator;
    this.onResponseListener = onResponseListener;
    this.onDisconnectListener = onDisconnectListener;

    setContentPane(contentPane);
    getRootPane().setDefaultButton(buttonSearch);
    setResizable(false);
    pack();
    setLocationRelativeTo(null);

    buttonSearch.addActionListener(e -> onSearch());

    buttonDisconnect.addActionListener(e -> onDisconnect());

    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    addWindowListener(
        new WindowAdapter() {
          public void windowClosing(WindowEvent e) {
            onDisconnect();
          }
        });

    contentPane.registerKeyboardAction(
        e -> onDisconnect(),
        KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
        JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  }

  @Override
  public void setVisible(boolean b) {
    textFieldWord.setText("");
    super.setVisible(b);
  }

  private void onSearch() {
    Socket socket = connector.getSocket();
    String word = textFieldWord.getText();
    buttonSearch.setEnabled(false);
    buttonDisconnect.setEnabled(false);
    SwingUtilities.invokeLater(
        () -> {
          try {
            communicator.sendWord(socket, word);
            communicator.receiveResponse(socket);
            onResponseListener.run();
          } catch (ConnectionException ex) {
            JOptionPane.showMessageDialog(
                null, "Disconnected.", "Connection error", JOptionPane.ERROR_MESSAGE);
            buttonDisconnect.doClick();
          } finally {
            buttonSearch.setEnabled(true);
            buttonDisconnect.setEnabled(true);
          }
        });
  }

  private void onDisconnect() {
    SwingUtilities.invokeLater(onDisconnectListener);
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(
        panel1,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer1 = new Spacer();
    panel1.add(
        spacer1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
    panel1.add(
        panel2,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    buttonSearch = new JButton();
    buttonSearch.setText("Search");
    panel2.add(
        buttonSearch,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    buttonDisconnect = new JButton();
    buttonDisconnect.setText("Disconnect");
    panel2.add(
        buttonDisconnect,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(
        panel3,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    panel3.setBorder(
        BorderFactory.createTitledBorder(
            null,
            "Query",
            TitledBorder.DEFAULT_JUSTIFICATION,
            TitledBorder.DEFAULT_POSITION,
            null,
            null));
    final JLabel label1 = new JLabel();
    label1.setText("Word:");
    panel3.add(
        label1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    textFieldWord = new JTextField();
    panel3.add(
        textFieldWord,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            new Dimension(150, -1),
            null,
            0,
            false));
  }

  /** @noinspection ALL */
  public JComponent $$$getRootComponent$$$() {
    return contentPane;
  }
}
